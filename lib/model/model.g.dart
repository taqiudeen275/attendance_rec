// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Staff.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Staff TABLE
class TableStaff extends SqfEntityTableBase {
  TableStaff() {
    // declare properties of EntityTable
    tableName = 'staff';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('first_name', DbType.text),
      SqfEntityFieldBase('last_name', DbType.text),
      SqfEntityFieldBase('email', DbType.text),
      SqfEntityFieldBase('phone_number', DbType.text),
      SqfEntityFieldBase('staff_id', DbType.text),
      SqfEntityFieldBase('rank', DbType.text),
      SqfEntityFieldRelationshipBase(
          TableDepartment.getInstance, DeleteRule.SET_NULL,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'departmentId',
          defaultValue: 0),
      SqfEntityFieldBase('employment_status', DbType.text),
      SqfEntityFieldBase('join_date', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableStaff();
  }
}

// Attendance TABLE
class TableAttendance extends SqfEntityTableBase {
  TableAttendance() {
    // declare properties of EntityTable
    tableName = 'attendance';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(TableStaff.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'staffId',
          defaultValue: 0),
      SqfEntityFieldBase('date', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('check_in_time', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('check_out_time', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('attendance_status', DbType.text),
      SqfEntityFieldBase('notes', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableAttendance();
  }
}

// Department TABLE
class TableDepartment extends SqfEntityTableBase {
  TableDepartment() {
    // declare properties of EntityTable
    tableName = 'department';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('description', DbType.text),
      SqfEntityFieldBase('head_of_department', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableDepartment();
  }
}

// Staff_lesson_note TABLE
class TableStaff_lesson_note extends SqfEntityTableBase {
  TableStaff_lesson_note() {
    // declare properties of EntityTable
    tableName = 'staff_lesson_note';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(TableStaff.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'staffId',
          defaultValue: 0),
      SqfEntityFieldBase('academic_year', DbType.text),
      SqfEntityFieldBase('term', DbType.text),
      SqfEntityFieldBase('week_1', DbType.bool),
      SqfEntityFieldBase('week_2', DbType.bool),
      SqfEntityFieldBase('week_3', DbType.bool),
      SqfEntityFieldBase('week_4', DbType.bool),
      SqfEntityFieldBase('week_5', DbType.bool),
      SqfEntityFieldBase('week_6', DbType.bool),
      SqfEntityFieldBase('week_7', DbType.bool),
      SqfEntityFieldBase('week_8', DbType.bool),
      SqfEntityFieldBase('week_9', DbType.bool),
      SqfEntityFieldBase('week_10', DbType.bool),
      SqfEntityFieldBase('week_11', DbType.bool),
      SqfEntityFieldBase('week_12', DbType.bool),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableStaff_lesson_note();
  }
}

// Plc TABLE
class TablePlc extends SqfEntityTableBase {
  TablePlc() {
    // declare properties of EntityTable
    tableName = 'plc';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(TableStaff.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'staffId',
          defaultValue: 0),
      SqfEntityFieldBase('academic_year', DbType.text),
      SqfEntityFieldBase('term', DbType.text),
      SqfEntityFieldBase('week_1', DbType.bool),
      SqfEntityFieldBase('week_2', DbType.bool),
      SqfEntityFieldBase('week_3', DbType.bool),
      SqfEntityFieldBase('week_4', DbType.bool),
      SqfEntityFieldBase('week_5', DbType.bool),
      SqfEntityFieldBase('week_6', DbType.bool),
      SqfEntityFieldBase('week_7', DbType.bool),
      SqfEntityFieldBase('week_8', DbType.bool),
      SqfEntityFieldBase('week_9', DbType.bool),
      SqfEntityFieldBase('week_10', DbType.bool),
      SqfEntityFieldBase('week_11', DbType.bool),
      SqfEntityFieldBase('week_12', DbType.bool),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TablePlc();
  }
}

// User TABLE
class TableUser extends SqfEntityTableBase {
  TableUser() {
    // declare properties of EntityTable
    tableName = 'user';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(
          TableStaff.getInstance, DeleteRule.SET_NULL,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'staffId',
          defaultValue: 0),
      SqfEntityFieldBase('username', DbType.text),
      SqfEntityFieldBase('password', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableUser();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class AttendanceDbModel extends SqfEntityModelProvider {
  AttendanceDbModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TableStaff.getInstance,
      TableAttendance.getInstance,
      TableDepartment.getInstance,
      TableStaff_lesson_note.getInstance,
      TablePlc.getInstance,
      TableUser.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = myDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Staff
class Staff extends TableBase {
  Staff(
      {this.id,
      this.first_name,
      this.last_name,
      this.email,
      this.phone_number,
      this.staff_id,
      this.rank,
      this.departmentId,
      this.employment_status,
      this.join_date,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Staff.withFields(
      this.first_name,
      this.last_name,
      this.email,
      this.phone_number,
      this.staff_id,
      this.rank,
      this.departmentId,
      this.employment_status,
      this.join_date,
      this.isDeleted) {
    _setDefaultValues();
  }
  Staff.withId(
      this.id,
      this.first_name,
      this.last_name,
      this.email,
      this.phone_number,
      this.staff_id,
      this.rank,
      this.departmentId,
      this.employment_status,
      this.join_date,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Staff.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['first_name'] != null) {
      first_name = o['first_name'].toString();
    }
    if (o['last_name'] != null) {
      last_name = o['last_name'].toString();
    }
    if (o['email'] != null) {
      email = o['email'].toString();
    }
    if (o['phone_number'] != null) {
      phone_number = o['phone_number'].toString();
    }
    if (o['staff_id'] != null) {
      staff_id = o['staff_id'].toString();
    }
    if (o['rank'] != null) {
      rank = o['rank'].toString();
    }
    departmentId = int.tryParse(o['departmentId'].toString());

    if (o['employment_status'] != null) {
      employment_status = o['employment_status'].toString();
    }
    if (o['join_date'] != null) {
      join_date = int.tryParse(o['join_date'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['join_date'].toString())!)
          : DateTime.tryParse(o['join_date'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plDepartment = o['department'] != null
        ? Department.fromMap(o['department'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Staff)
  int? id;
  String? first_name;
  String? last_name;
  String? email;
  String? phone_number;
  String? staff_id;
  String? rank;
  int? departmentId;
  String? employment_status;
  DateTime? join_date;
  bool? isDeleted;

  // end FIELDS (Staff)

// RELATIONSHIPS (Staff)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plDepartment', 'plField2'..]) or so on..
  Department? plDepartment;

  /// get Department By DepartmentId
  Future<Department?> getDepartment(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Department().getById(departmentId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Staff)

// COLLECTIONS & VIRTUALS (Staff)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plAttendances', 'plField2'..]) or so on..
  List<Attendance>? plAttendances;

  /// get Attendance(s) filtered by id=staffId
  AttendanceFilterBuilder? getAttendances(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Attendance()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .staffId
        .equals(id)
        .and;
  }

  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plStaff_lesson_notes', 'plField2'..]) or so on..
  List<Staff_lesson_note>? plStaff_lesson_notes;

  /// get Staff_lesson_note(s) filtered by id=staffId
  Staff_lesson_noteFilterBuilder? getStaff_lesson_notes(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Staff_lesson_note()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .staffId
        .equals(id)
        .and;
  }

  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plPlcs', 'plField2'..]) or so on..
  List<Plc>? plPlcs;

  /// get Plc(s) filtered by id=staffId
  PlcFilterBuilder? getPlcs(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Plc()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .staffId
        .equals(id)
        .and;
  }

  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plUsers', 'plField2'..]) or so on..
  List<User>? plUsers;

  /// get User(s) filtered by id=staffId
  UserFilterBuilder? getUsers(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return User()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .staffId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Staff)

  static const bool _softDeleteActivated = true;
  StaffManager? __mnStaff;

  StaffManager get _mnStaff {
    return __mnStaff = __mnStaff ?? StaffManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (first_name != null || !forView) {
      map['first_name'] = first_name;
    }
    if (last_name != null || !forView) {
      map['last_name'] = last_name;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (phone_number != null || !forView) {
      map['phone_number'] = phone_number;
    }
    if (staff_id != null || !forView) {
      map['staff_id'] = staff_id;
    }
    if (rank != null || !forView) {
      map['rank'] = rank;
    }
    if (departmentId != null) {
      map['departmentId'] = forView
          ? plDepartment == null
              ? departmentId
              : plDepartment!.name
          : departmentId;
    } else if (departmentId != null || !forView) {
      map['departmentId'] = null;
    }
    if (employment_status != null || !forView) {
      map['employment_status'] = employment_status;
    }
    if (join_date != null) {
      map['join_date'] = forJson
          ? join_date!.toString()
          : forQuery
              ? join_date!.millisecondsSinceEpoch
              : join_date;
    } else if (join_date != null || !forView) {
      map['join_date'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (first_name != null || !forView) {
      map['first_name'] = first_name;
    }
    if (last_name != null || !forView) {
      map['last_name'] = last_name;
    }
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (phone_number != null || !forView) {
      map['phone_number'] = phone_number;
    }
    if (staff_id != null || !forView) {
      map['staff_id'] = staff_id;
    }
    if (rank != null || !forView) {
      map['rank'] = rank;
    }
    if (departmentId != null) {
      map['departmentId'] = forView
          ? plDepartment == null
              ? departmentId
              : plDepartment!.name
          : departmentId;
    } else if (departmentId != null || !forView) {
      map['departmentId'] = null;
    }
    if (employment_status != null || !forView) {
      map['employment_status'] = employment_status;
    }
    if (join_date != null) {
      map['join_date'] = forJson
          ? join_date!.toString()
          : forQuery
              ? join_date!.millisecondsSinceEpoch
              : join_date;
    } else if (join_date != null || !forView) {
      map['join_date'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Staff)
    if (!forQuery) {
      map['Attendances'] = await getAttendances()!.toMapList();
    }
    if (!forQuery) {
      map['Staff_lesson_notes'] = await getStaff_lesson_notes()!.toMapList();
    }
    if (!forQuery) {
      map['Plcs'] = await getPlcs()!.toMapList();
    }
    if (!forQuery) {
      map['Users'] = await getUsers()!.toMapList();
    }
// END COLLECTIONS (Staff)

    return map;
  }

  /// This method returns Json String [Staff]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Staff]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      first_name,
      last_name,
      email,
      phone_number,
      staff_id,
      rank,
      departmentId,
      employment_status,
      join_date != null ? join_date!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      first_name,
      last_name,
      email,
      phone_number,
      staff_id,
      rank,
      departmentId,
      employment_status,
      join_date != null ? join_date!.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<Staff>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Staff.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Staff>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Staff>[];
    try {
      objList = list
          .map((staff) => Staff.fromMap(staff as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Staff.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Staff>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Staff> objList = <Staff>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Staff.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('staff.plAttendances') && */ (preloadFields ==
                null ||
            preloadFields.contains('plAttendances'))) {
          /*_loadedfields!.add('staff.plAttendances'); */ obj.plAttendances =
              obj.plAttendances ??
                  await obj.getAttendances()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('staff.plStaff_lesson_notes') && */ (preloadFields ==
                null ||
            preloadFields.contains('plStaff_lesson_notes'))) {
          /*_loadedfields!.add('staff.plStaff_lesson_notes'); */ obj
                  .plStaff_lesson_notes =
              obj.plStaff_lesson_notes ??
                  await obj.getStaff_lesson_notes()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('staff.plPlcs') && */ (preloadFields ==
                null ||
            preloadFields.contains('plPlcs'))) {
          /*_loadedfields!.add('staff.plPlcs'); */ obj.plPlcs = obj.plPlcs ??
              await obj.getPlcs()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('staff.plUsers') && */ (preloadFields ==
                null ||
            preloadFields.contains('plUsers'))) {
          /*_loadedfields!.add('staff.plUsers'); */ obj.plUsers = obj.plUsers ??
              await obj.getUsers()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plDepartment'))) {
          obj.plDepartment = obj.plDepartment ??
              await obj.getDepartment(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Staff by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Staff] if exist, otherwise returns null
  Future<Staff?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Staff? obj;
    final data = await _mnStaff.getById([id]);
    if (data.length != 0) {
      obj = Staff.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('staff.plAttendances') && */ (preloadFields ==
                null ||
            preloadFields.contains('plAttendances'))) {
          /*_loadedfields!.add('staff.plAttendances'); */ obj.plAttendances =
              obj.plAttendances ??
                  await obj.getAttendances()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('staff.plStaff_lesson_notes') && */ (preloadFields ==
                null ||
            preloadFields.contains('plStaff_lesson_notes'))) {
          /*_loadedfields!.add('staff.plStaff_lesson_notes'); */ obj
                  .plStaff_lesson_notes =
              obj.plStaff_lesson_notes ??
                  await obj.getStaff_lesson_notes()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('staff.plPlcs') && */ (preloadFields ==
                null ||
            preloadFields.contains('plPlcs'))) {
          /*_loadedfields!.add('staff.plPlcs'); */ obj.plPlcs = obj.plPlcs ??
              await obj.getPlcs()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('staff.plUsers') && */ (preloadFields ==
                null ||
            preloadFields.contains('plUsers'))) {
          /*_loadedfields!.add('staff.plUsers'); */ obj.plUsers = obj.plUsers ??
              await obj.getUsers()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plDepartment'))) {
          obj.plDepartment = obj.plDepartment ??
              await obj.getDepartment(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Staff) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnStaff.insert(this, ignoreBatch);
    } else {
      await _mnStaff.update(this);
    }

    return id;
  }

  /// Saves the (Staff) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnStaff.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnStaff.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Staff. Returns a new Primary Key value of Staff

  /// <returns>Returns a new Primary Key value of Staff
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Staff> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Staff> staffs,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await AttendanceDbModel().batchStart();
    for (final obj in staffs) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await AttendanceDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < staffs.length; i++) {
        if (staffs[i].id == null) {
          staffs[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnStaff.rawInsert(
          'INSERT OR REPLACE INTO staff (id, first_name, last_name, email, phone_number, staff_id, rank, departmentId, employment_status, join_date,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            first_name,
            last_name,
            email,
            phone_number,
            staff_id,
            rank,
            departmentId,
            employment_status,
            join_date != null ? join_date!.millisecondsSinceEpoch : null,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Staff id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Staff id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Staff Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Staff>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Staff> staffs,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnStaff.rawInsertAll(
        'INSERT OR REPLACE INTO staff (id, first_name, last_name, email, phone_number, staff_id, rank, departmentId, employment_status, join_date,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        staffs,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Staff

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Staff invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result =
          await Attendance().select().staffId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    {
      result = await Staff_lesson_note()
          .select()
          .staffId
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    {
      result = await Plc().select().staffId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    {
      result = await User()
          .select()
          .staffId
          .equals(id)
          .and
          .update({'staffId': null});
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnStaff
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnStaff.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Staff

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Staff invoked (id=$id)');
    {
      return _mnStaff.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  StaffFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return StaffFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  StaffFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return StaffFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    departmentId = departmentId ?? 0;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion staff

// region StaffField
class StaffField extends FilterBase {
  StaffField(StaffFilterBuilder staffFB) : super(staffFB);

  @override
  StaffFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as StaffFilterBuilder;
  }

  @override
  StaffFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as StaffFilterBuilder;
  }

  @override
  StaffFilterBuilder isNull() {
    return super.isNull() as StaffFilterBuilder;
  }

  @override
  StaffFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as StaffFilterBuilder;
  }

  @override
  StaffFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as StaffFilterBuilder;
  }

  @override
  StaffFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as StaffFilterBuilder;
  }

  @override
  StaffFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as StaffFilterBuilder;
  }

  @override
  StaffFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as StaffFilterBuilder;
  }

  @override
  StaffFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as StaffFilterBuilder;
  }

  @override
  StaffFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as StaffFilterBuilder;
  }

  @override
  StaffFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as StaffFilterBuilder;
  }

  @override
  StaffFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as StaffFilterBuilder;
  }

  @override
  StaffField get not {
    return super.not as StaffField;
  }
}
// endregion StaffField

// region StaffFilterBuilder
class StaffFilterBuilder extends ConjunctionBase {
  StaffFilterBuilder(Staff obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnStaff = obj._mnStaff;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  StaffManager? _mnStaff;

  /// put the sql keyword 'AND'
  @override
  StaffFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  StaffFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  StaffFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  StaffFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  StaffFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  StaffFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  StaffFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  StaffFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  StaffFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  StaffFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  StaffFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  StaffField _setField(StaffField? field, String colName, DbType dbtype) {
    return StaffField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  StaffField? _id;
  StaffField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  StaffField? _first_name;
  StaffField get first_name {
    return _first_name = _setField(_first_name, 'first_name', DbType.text);
  }

  StaffField? _last_name;
  StaffField get last_name {
    return _last_name = _setField(_last_name, 'last_name', DbType.text);
  }

  StaffField? _email;
  StaffField get email {
    return _email = _setField(_email, 'email', DbType.text);
  }

  StaffField? _phone_number;
  StaffField get phone_number {
    return _phone_number =
        _setField(_phone_number, 'phone_number', DbType.text);
  }

  StaffField? _staff_id;
  StaffField get staff_id {
    return _staff_id = _setField(_staff_id, 'staff_id', DbType.text);
  }

  StaffField? _rank;
  StaffField get rank {
    return _rank = _setField(_rank, 'rank', DbType.text);
  }

  StaffField? _departmentId;
  StaffField get departmentId {
    return _departmentId =
        _setField(_departmentId, 'departmentId', DbType.integer);
  }

  StaffField? _employment_status;
  StaffField get employment_status {
    return _employment_status =
        _setField(_employment_status, 'employment_status', DbType.text);
  }

  StaffField? _join_date;
  StaffField get join_date {
    return _join_date = _setField(_join_date, 'join_date', DbType.datetime);
  }

  StaffField? _isDeleted;
  StaffField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Staff> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Attendance) according to DeleteRule.CASCADE
    final idListAttendanceBYstaffId = toListPrimaryKeySQL(false);
    final resAttendanceBYstaffId = await Attendance()
        .select()
        .where('staffId IN (${idListAttendanceBYstaffId['sql']})',
            parameterValue: idListAttendanceBYstaffId['args'])
        .delete(hardDelete);
    if (!resAttendanceBYstaffId.success) {
      return resAttendanceBYstaffId;
    }
// Delete sub records where in (Staff_lesson_note) according to DeleteRule.CASCADE
    final idListStaff_lesson_noteBYstaffId = toListPrimaryKeySQL(false);
    final resStaff_lesson_noteBYstaffId = await Staff_lesson_note()
        .select()
        .where('staffId IN (${idListStaff_lesson_noteBYstaffId['sql']})',
            parameterValue: idListStaff_lesson_noteBYstaffId['args'])
        .delete(hardDelete);
    if (!resStaff_lesson_noteBYstaffId.success) {
      return resStaff_lesson_noteBYstaffId;
    }
// Delete sub records where in (Plc) according to DeleteRule.CASCADE
    final idListPlcBYstaffId = toListPrimaryKeySQL(false);
    final resPlcBYstaffId = await Plc()
        .select()
        .where('staffId IN (${idListPlcBYstaffId['sql']})',
            parameterValue: idListPlcBYstaffId['args'])
        .delete(hardDelete);
    if (!resPlcBYstaffId.success) {
      return resPlcBYstaffId;
    }
// UPDATE sub records where in (User) according to DeleteRule.SET_NULL
    final idListUserBYstaffId = toListPrimaryKeySQL(false);
    final resUserBYstaffId = await User()
        .select()
        .where('staffId IN (${idListUserBYstaffId['sql']})',
            parameterValue: idListUserBYstaffId['args'])
        .update({'staffId': null});
    if (!resUserBYstaffId.success) {
      return resUserBYstaffId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnStaff!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnStaff!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Staff> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Staff bulk invoked');
    return _mnStaff!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from staff ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnStaff!.updateBatch(qparams, values);
  }

  /// This method always returns [Staff] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Staff?
  @override
  Future<Staff?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnStaff!.toList(qparams);
    final data = await objFuture;
    Staff? obj;
    if (data.isNotEmpty) {
      obj = Staff.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('staff.plAttendances') && */ (preloadFields ==
                null ||
            preloadFields.contains('plAttendances'))) {
          /*_loadedfields!.add('staff.plAttendances'); */ obj.plAttendances =
              obj.plAttendances ??
                  await obj.getAttendances()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('staff.plStaff_lesson_notes') && */ (preloadFields ==
                null ||
            preloadFields.contains('plStaff_lesson_notes'))) {
          /*_loadedfields!.add('staff.plStaff_lesson_notes'); */ obj
                  .plStaff_lesson_notes =
              obj.plStaff_lesson_notes ??
                  await obj.getStaff_lesson_notes()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('staff.plPlcs') && */ (preloadFields ==
                null ||
            preloadFields.contains('plPlcs'))) {
          /*_loadedfields!.add('staff.plPlcs'); */ obj.plPlcs = obj.plPlcs ??
              await obj.getPlcs()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('staff.plUsers') && */ (preloadFields ==
                null ||
            preloadFields.contains('plUsers'))) {
          /*_loadedfields!.add('staff.plUsers'); */ obj.plUsers = obj.plUsers ??
              await obj.getUsers()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plDepartment'))) {
          obj.plDepartment = obj.plDepartment ??
              await obj.getDepartment(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Staff]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Staff?
  @override
  Future<Staff> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Staff();
  }

  /// This method returns int. [Staff]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? staffCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final staffsFuture = await _mnStaff!.toList(qparams);
    final int count = staffsFuture[0]['CNT'] as int;
    if (staffCount != null) {
      staffCount(count);
    }
    return count;
  }

  /// This method returns List<Staff> [Staff]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Staff>
  @override
  Future<List<Staff>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Staff> staffsData = await Staff.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return staffsData;
  }

  /// This method returns Json String [Staff]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Staff]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Staff]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnStaff!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Staff]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM staff WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnStaff!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Staff]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnStaff!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Staff.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnStaff!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion StaffFilterBuilder

// region StaffFields
class StaffFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fFirst_name;
  static TableField get first_name {
    return _fFirst_name = _fFirst_name ??
        SqlSyntax.setField(_fFirst_name, 'first_name', DbType.text);
  }

  static TableField? _fLast_name;
  static TableField get last_name {
    return _fLast_name = _fLast_name ??
        SqlSyntax.setField(_fLast_name, 'last_name', DbType.text);
  }

  static TableField? _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField? _fPhone_number;
  static TableField get phone_number {
    return _fPhone_number = _fPhone_number ??
        SqlSyntax.setField(_fPhone_number, 'phone_number', DbType.text);
  }

  static TableField? _fStaff_id;
  static TableField get staff_id {
    return _fStaff_id =
        _fStaff_id ?? SqlSyntax.setField(_fStaff_id, 'staff_id', DbType.text);
  }

  static TableField? _fRank;
  static TableField get rank {
    return _fRank = _fRank ?? SqlSyntax.setField(_fRank, 'rank', DbType.text);
  }

  static TableField? _fDepartmentId;
  static TableField get departmentId {
    return _fDepartmentId = _fDepartmentId ??
        SqlSyntax.setField(_fDepartmentId, 'departmentId', DbType.integer);
  }

  static TableField? _fEmployment_status;
  static TableField get employment_status {
    return _fEmployment_status = _fEmployment_status ??
        SqlSyntax.setField(
            _fEmployment_status, 'employment_status', DbType.text);
  }

  static TableField? _fJoin_date;
  static TableField get join_date {
    return _fJoin_date = _fJoin_date ??
        SqlSyntax.setField(_fJoin_date, 'join_date', DbType.datetime);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion StaffFields

//region StaffManager
class StaffManager extends SqfEntityProvider {
  StaffManager()
      : super(AttendanceDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'staff';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion StaffManager
// region Attendance
class Attendance extends TableBase {
  Attendance(
      {this.id,
      this.staffId,
      this.date,
      this.check_in_time,
      this.check_out_time,
      this.attendance_status,
      this.notes}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Attendance.withFields(this.staffId, this.date, this.check_in_time,
      this.check_out_time, this.attendance_status, this.notes) {
    _setDefaultValues();
  }
  Attendance.withId(this.id, this.staffId, this.date, this.check_in_time,
      this.check_out_time, this.attendance_status, this.notes) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Attendance.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    staffId = int.tryParse(o['staffId'].toString());

    if (o['date'] != null) {
      date = int.tryParse(o['date'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['date'].toString())!)
          : DateTime.tryParse(o['date'].toString());
    }
    if (o['check_in_time'] != null) {
      check_in_time = int.tryParse(o['check_in_time'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['check_in_time'].toString())!)
          : DateTime.tryParse(o['check_in_time'].toString());
    }
    if (o['check_out_time'] != null) {
      check_out_time = int.tryParse(o['check_out_time'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['check_out_time'].toString())!)
          : DateTime.tryParse(o['check_out_time'].toString());
    }
    if (o['attendance_status'] != null) {
      attendance_status = o['attendance_status'].toString();
    }
    if (o['notes'] != null) {
      notes = o['notes'].toString();
    }

    // RELATIONSHIPS FromMAP
    plStaff = o['staff'] != null
        ? Staff.fromMap(o['staff'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Attendance)
  int? id;
  int? staffId;
  DateTime? date;
  DateTime? check_in_time;
  DateTime? check_out_time;
  String? attendance_status;
  String? notes;

  // end FIELDS (Attendance)

// RELATIONSHIPS (Attendance)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plStaff', 'plField2'..]) or so on..
  Staff? plStaff;

  /// get Staff By StaffId
  Future<Staff?> getStaff(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Staff()
        .getById(staffId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Attendance)

  static const bool _softDeleteActivated = false;
  AttendanceManager? __mnAttendance;

  AttendanceManager get _mnAttendance {
    return __mnAttendance = __mnAttendance ?? AttendanceManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (staffId != null) {
      map['staffId'] = forView
          ? plStaff == null
              ? staffId
              : plStaff!.first_name
          : staffId;
    } else if (staffId != null || !forView) {
      map['staffId'] = null;
    }
    if (date != null) {
      map['date'] = forJson
          ? date!.toString()
          : forQuery
              ? date!.millisecondsSinceEpoch
              : date;
    } else if (date != null || !forView) {
      map['date'] = null;
    }
    if (check_in_time != null) {
      map['check_in_time'] = forJson
          ? check_in_time!.toString()
          : forQuery
              ? check_in_time!.millisecondsSinceEpoch
              : check_in_time;
    } else if (check_in_time != null || !forView) {
      map['check_in_time'] = null;
    }
    if (check_out_time != null) {
      map['check_out_time'] = forJson
          ? check_out_time!.toString()
          : forQuery
              ? check_out_time!.millisecondsSinceEpoch
              : check_out_time;
    } else if (check_out_time != null || !forView) {
      map['check_out_time'] = null;
    }
    if (attendance_status != null || !forView) {
      map['attendance_status'] = attendance_status;
    }
    if (notes != null || !forView) {
      map['notes'] = notes;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (staffId != null) {
      map['staffId'] = forView
          ? plStaff == null
              ? staffId
              : plStaff!.first_name
          : staffId;
    } else if (staffId != null || !forView) {
      map['staffId'] = null;
    }
    if (date != null) {
      map['date'] = forJson
          ? date!.toString()
          : forQuery
              ? date!.millisecondsSinceEpoch
              : date;
    } else if (date != null || !forView) {
      map['date'] = null;
    }
    if (check_in_time != null) {
      map['check_in_time'] = forJson
          ? check_in_time!.toString()
          : forQuery
              ? check_in_time!.millisecondsSinceEpoch
              : check_in_time;
    } else if (check_in_time != null || !forView) {
      map['check_in_time'] = null;
    }
    if (check_out_time != null) {
      map['check_out_time'] = forJson
          ? check_out_time!.toString()
          : forQuery
              ? check_out_time!.millisecondsSinceEpoch
              : check_out_time;
    } else if (check_out_time != null || !forView) {
      map['check_out_time'] = null;
    }
    if (attendance_status != null || !forView) {
      map['attendance_status'] = attendance_status;
    }
    if (notes != null || !forView) {
      map['notes'] = notes;
    }

    return map;
  }

  /// This method returns Json String [Attendance]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Attendance]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      staffId,
      date != null ? date!.millisecondsSinceEpoch : null,
      check_in_time != null ? check_in_time!.millisecondsSinceEpoch : null,
      check_out_time != null ? check_out_time!.millisecondsSinceEpoch : null,
      attendance_status,
      notes
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      staffId,
      date != null ? date!.millisecondsSinceEpoch : null,
      check_in_time != null ? check_in_time!.millisecondsSinceEpoch : null,
      check_out_time != null ? check_out_time!.millisecondsSinceEpoch : null,
      attendance_status,
      notes
    ];
  }

  static Future<List<Attendance>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Attendance.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Attendance>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Attendance>[];
    try {
      objList = list
          .map((attendance) =>
              Attendance.fromMap(attendance as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Attendance.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Attendance>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Attendance> objList = <Attendance>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Attendance.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plStaff'))) {
          obj.plStaff =
              obj.plStaff ?? await obj.getStaff(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Attendance by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Attendance] if exist, otherwise returns null
  Future<Attendance?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Attendance? obj;
    final data = await _mnAttendance.getById([id]);
    if (data.length != 0) {
      obj = Attendance.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plStaff'))) {
          obj.plStaff =
              obj.plStaff ?? await obj.getStaff(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Attendance) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnAttendance.insert(this, ignoreBatch);
    } else {
      await _mnAttendance.update(this);
    }

    return id;
  }

  /// Saves the (Attendance) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnAttendance.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnAttendance.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Attendance. Returns a new Primary Key value of Attendance

  /// <returns>Returns a new Primary Key value of Attendance
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Attendance> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Attendance> attendances,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await AttendanceDbModel().batchStart();
    for (final obj in attendances) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await AttendanceDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < attendances.length; i++) {
        if (attendances[i].id == null) {
          attendances[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnAttendance.rawInsert(
          'INSERT OR REPLACE INTO attendance (id, staffId, date, check_in_time, check_out_time, attendance_status, notes)  VALUES (?,?,?,?,?,?,?)',
          [
            id,
            staffId,
            date != null ? date!.millisecondsSinceEpoch : null,
            check_in_time != null
                ? check_in_time!.millisecondsSinceEpoch
                : null,
            check_out_time != null
                ? check_out_time!.millisecondsSinceEpoch
                : null,
            attendance_status,
            notes
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Attendance id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Attendance id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Attendance Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Attendance>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Attendance> attendances,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnAttendance.rawInsertAll(
        'INSERT OR REPLACE INTO attendance (id, staffId, date, check_in_time, check_out_time, attendance_status, notes)  VALUES (?,?,?,?,?,?,?)',
        attendances,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Attendance

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Attendance invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnAttendance
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnAttendance.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Attendance] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  AttendanceFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AttendanceFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  AttendanceFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AttendanceFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    staffId = staffId ?? 0;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion attendance

// region AttendanceField
class AttendanceField extends FilterBase {
  AttendanceField(AttendanceFilterBuilder attendanceFB) : super(attendanceFB);

  @override
  AttendanceFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as AttendanceFilterBuilder;
  }

  @override
  AttendanceFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as AttendanceFilterBuilder;
  }

  @override
  AttendanceFilterBuilder isNull() {
    return super.isNull() as AttendanceFilterBuilder;
  }

  @override
  AttendanceFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as AttendanceFilterBuilder;
  }

  @override
  AttendanceFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as AttendanceFilterBuilder;
  }

  @override
  AttendanceFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as AttendanceFilterBuilder;
  }

  @override
  AttendanceFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as AttendanceFilterBuilder;
  }

  @override
  AttendanceFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as AttendanceFilterBuilder;
  }

  @override
  AttendanceFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as AttendanceFilterBuilder;
  }

  @override
  AttendanceFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as AttendanceFilterBuilder;
  }

  @override
  AttendanceFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as AttendanceFilterBuilder;
  }

  @override
  AttendanceFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as AttendanceFilterBuilder;
  }

  @override
  AttendanceField get not {
    return super.not as AttendanceField;
  }
}
// endregion AttendanceField

// region AttendanceFilterBuilder
class AttendanceFilterBuilder extends ConjunctionBase {
  AttendanceFilterBuilder(Attendance obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnAttendance = obj._mnAttendance;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  AttendanceManager? _mnAttendance;

  /// put the sql keyword 'AND'
  @override
  AttendanceFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  AttendanceFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  AttendanceFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  AttendanceFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  AttendanceFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  AttendanceFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  AttendanceFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  AttendanceFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  AttendanceFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  AttendanceFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  AttendanceFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  AttendanceField _setField(
      AttendanceField? field, String colName, DbType dbtype) {
    return AttendanceField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  AttendanceField? _id;
  AttendanceField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  AttendanceField? _staffId;
  AttendanceField get staffId {
    return _staffId = _setField(_staffId, 'staffId', DbType.integer);
  }

  AttendanceField? _date;
  AttendanceField get date {
    return _date = _setField(_date, 'date', DbType.datetime);
  }

  AttendanceField? _check_in_time;
  AttendanceField get check_in_time {
    return _check_in_time =
        _setField(_check_in_time, 'check_in_time', DbType.datetime);
  }

  AttendanceField? _check_out_time;
  AttendanceField get check_out_time {
    return _check_out_time =
        _setField(_check_out_time, 'check_out_time', DbType.datetime);
  }

  AttendanceField? _attendance_status;
  AttendanceField get attendance_status {
    return _attendance_status =
        _setField(_attendance_status, 'attendance_status', DbType.text);
  }

  AttendanceField? _notes;
  AttendanceField get notes {
    return _notes = _setField(_notes, 'notes', DbType.text);
  }

  /// Deletes List<Attendance> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnAttendance!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnAttendance!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from attendance ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnAttendance!.updateBatch(qparams, values);
  }

  /// This method always returns [Attendance] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Attendance?
  @override
  Future<Attendance?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnAttendance!.toList(qparams);
    final data = await objFuture;
    Attendance? obj;
    if (data.isNotEmpty) {
      obj = Attendance.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plStaff'))) {
          obj.plStaff =
              obj.plStaff ?? await obj.getStaff(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Attendance]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Attendance?
  @override
  Future<Attendance> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Attendance();
  }

  /// This method returns int. [Attendance]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? attendanceCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final attendancesFuture = await _mnAttendance!.toList(qparams);
    final int count = attendancesFuture[0]['CNT'] as int;
    if (attendanceCount != null) {
      attendanceCount(count);
    }
    return count;
  }

  /// This method returns List<Attendance> [Attendance]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Attendance>
  @override
  Future<List<Attendance>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Attendance> attendancesData = await Attendance.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return attendancesData;
  }

  /// This method returns Json String [Attendance]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Attendance]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Attendance]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnAttendance!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Attendance]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM attendance WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnAttendance!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Attendance]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnAttendance!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Attendance.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnAttendance!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion AttendanceFilterBuilder

// region AttendanceFields
class AttendanceFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fStaffId;
  static TableField get staffId {
    return _fStaffId =
        _fStaffId ?? SqlSyntax.setField(_fStaffId, 'staffId', DbType.integer);
  }

  static TableField? _fDate;
  static TableField get date {
    return _fDate =
        _fDate ?? SqlSyntax.setField(_fDate, 'date', DbType.datetime);
  }

  static TableField? _fCheck_in_time;
  static TableField get check_in_time {
    return _fCheck_in_time = _fCheck_in_time ??
        SqlSyntax.setField(_fCheck_in_time, 'check_in_time', DbType.datetime);
  }

  static TableField? _fCheck_out_time;
  static TableField get check_out_time {
    return _fCheck_out_time = _fCheck_out_time ??
        SqlSyntax.setField(_fCheck_out_time, 'check_out_time', DbType.datetime);
  }

  static TableField? _fAttendance_status;
  static TableField get attendance_status {
    return _fAttendance_status = _fAttendance_status ??
        SqlSyntax.setField(
            _fAttendance_status, 'attendance_status', DbType.text);
  }

  static TableField? _fNotes;
  static TableField get notes {
    return _fNotes =
        _fNotes ?? SqlSyntax.setField(_fNotes, 'notes', DbType.text);
  }
}
// endregion AttendanceFields

//region AttendanceManager
class AttendanceManager extends SqfEntityProvider {
  AttendanceManager()
      : super(AttendanceDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'attendance';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion AttendanceManager
// region Department
class Department extends TableBase {
  Department({this.id, this.name, this.description, this.head_of_department}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Department.withFields(this.name, this.description, this.head_of_department) {
    _setDefaultValues();
  }
  Department.withId(
      this.id, this.name, this.description, this.head_of_department) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Department.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['description'] != null) {
      description = o['description'].toString();
    }
    if (o['head_of_department'] != null) {
      head_of_department = o['head_of_department'].toString();
    }
  }
  // FIELDS (Department)
  int? id;
  String? name;
  String? description;
  String? head_of_department;

  // end FIELDS (Department)

// COLLECTIONS & VIRTUALS (Department)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plStaffs', 'plField2'..]) or so on..
  List<Staff>? plStaffs;

  /// get Staff(s) filtered by id=departmentId
  StaffFilterBuilder? getStaffs(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Staff()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .departmentId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Department)

  static const bool _softDeleteActivated = false;
  DepartmentManager? __mnDepartment;

  DepartmentManager get _mnDepartment {
    return __mnDepartment = __mnDepartment ?? DepartmentManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (head_of_department != null || !forView) {
      map['head_of_department'] = head_of_department;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (head_of_department != null || !forView) {
      map['head_of_department'] = head_of_department;
    }

// COLLECTIONS (Department)
    if (!forQuery) {
      map['Staffs'] = await getStaffs()!.toMapList();
    }
// END COLLECTIONS (Department)

    return map;
  }

  /// This method returns Json String [Department]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Department]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name, description, head_of_department];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, name, description, head_of_department];
  }

  static Future<List<Department>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Department.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Department>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Department>[];
    try {
      objList = list
          .map((department) =>
              Department.fromMap(department as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Department.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Department>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Department> objList = <Department>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Department.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('department.plStaffs') && */ (preloadFields ==
                null ||
            preloadFields.contains('plStaffs'))) {
          /*_loadedfields!.add('department.plStaffs'); */ obj.plStaffs =
              obj.plStaffs ??
                  await obj.getStaffs()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Department by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Department] if exist, otherwise returns null
  Future<Department?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Department? obj;
    final data = await _mnDepartment.getById([id]);
    if (data.length != 0) {
      obj = Department.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('department.plStaffs') && */ (preloadFields ==
                null ||
            preloadFields.contains('plStaffs'))) {
          /*_loadedfields!.add('department.plStaffs'); */ obj.plStaffs =
              obj.plStaffs ??
                  await obj.getStaffs()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Department) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnDepartment.insert(this, ignoreBatch);
    } else {
      await _mnDepartment.update(this);
    }

    return id;
  }

  /// Saves the (Department) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnDepartment.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnDepartment.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Department. Returns a new Primary Key value of Department

  /// <returns>Returns a new Primary Key value of Department
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Department> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Department> departments,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await AttendanceDbModel().batchStart();
    for (final obj in departments) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await AttendanceDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < departments.length; i++) {
        if (departments[i].id == null) {
          departments[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnDepartment.rawInsert(
          'INSERT OR REPLACE INTO department (id, name, description, head_of_department)  VALUES (?,?,?,?)',
          [id, name, description, head_of_department],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Department id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Department id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Department Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Department>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Department> departments,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnDepartment.rawInsertAll(
        'INSERT OR REPLACE INTO department (id, name, description, head_of_department)  VALUES (?,?,?,?)',
        departments,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Department

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Department invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await Staff()
          .select()
          .departmentId
          .equals(id)
          .and
          .update({'departmentId': null});
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnDepartment
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnDepartment.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Department] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  DepartmentFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return DepartmentFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  DepartmentFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return DepartmentFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion department

// region DepartmentField
class DepartmentField extends FilterBase {
  DepartmentField(DepartmentFilterBuilder departmentFB) : super(departmentFB);

  @override
  DepartmentFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as DepartmentFilterBuilder;
  }

  @override
  DepartmentFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as DepartmentFilterBuilder;
  }

  @override
  DepartmentFilterBuilder isNull() {
    return super.isNull() as DepartmentFilterBuilder;
  }

  @override
  DepartmentFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as DepartmentFilterBuilder;
  }

  @override
  DepartmentFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as DepartmentFilterBuilder;
  }

  @override
  DepartmentFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as DepartmentFilterBuilder;
  }

  @override
  DepartmentFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as DepartmentFilterBuilder;
  }

  @override
  DepartmentFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as DepartmentFilterBuilder;
  }

  @override
  DepartmentFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as DepartmentFilterBuilder;
  }

  @override
  DepartmentFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as DepartmentFilterBuilder;
  }

  @override
  DepartmentFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as DepartmentFilterBuilder;
  }

  @override
  DepartmentFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as DepartmentFilterBuilder;
  }

  @override
  DepartmentField get not {
    return super.not as DepartmentField;
  }
}
// endregion DepartmentField

// region DepartmentFilterBuilder
class DepartmentFilterBuilder extends ConjunctionBase {
  DepartmentFilterBuilder(Department obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnDepartment = obj._mnDepartment;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  DepartmentManager? _mnDepartment;

  /// put the sql keyword 'AND'
  @override
  DepartmentFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  DepartmentFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  DepartmentFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  DepartmentFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  DepartmentFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  DepartmentFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  DepartmentFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  DepartmentFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  DepartmentFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  DepartmentFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  DepartmentFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  DepartmentField _setField(
      DepartmentField? field, String colName, DbType dbtype) {
    return DepartmentField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  DepartmentField? _id;
  DepartmentField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  DepartmentField? _name;
  DepartmentField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  DepartmentField? _description;
  DepartmentField get description {
    return _description = _setField(_description, 'description', DbType.text);
  }

  DepartmentField? _head_of_department;
  DepartmentField get head_of_department {
    return _head_of_department =
        _setField(_head_of_department, 'head_of_department', DbType.text);
  }

  /// Deletes List<Department> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // UPDATE sub records where in (Staff) according to DeleteRule.SET_NULL
    final idListStaffBYdepartmentId = toListPrimaryKeySQL(false);
    final resStaffBYdepartmentId = await Staff()
        .select()
        .where('departmentId IN (${idListStaffBYdepartmentId['sql']})',
            parameterValue: idListStaffBYdepartmentId['args'])
        .update({'departmentId': null});
    if (!resStaffBYdepartmentId.success) {
      return resStaffBYdepartmentId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnDepartment!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnDepartment!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from department ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnDepartment!.updateBatch(qparams, values);
  }

  /// This method always returns [Department] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Department?
  @override
  Future<Department?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnDepartment!.toList(qparams);
    final data = await objFuture;
    Department? obj;
    if (data.isNotEmpty) {
      obj = Department.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('department.plStaffs') && */ (preloadFields ==
                null ||
            preloadFields.contains('plStaffs'))) {
          /*_loadedfields!.add('department.plStaffs'); */ obj.plStaffs =
              obj.plStaffs ??
                  await obj.getStaffs()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Department]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Department?
  @override
  Future<Department> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Department();
  }

  /// This method returns int. [Department]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? departmentCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final departmentsFuture = await _mnDepartment!.toList(qparams);
    final int count = departmentsFuture[0]['CNT'] as int;
    if (departmentCount != null) {
      departmentCount(count);
    }
    return count;
  }

  /// This method returns List<Department> [Department]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Department>
  @override
  Future<List<Department>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Department> departmentsData = await Department.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return departmentsData;
  }

  /// This method returns Json String [Department]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Department]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Department]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnDepartment!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Department]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM department WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnDepartment!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Department]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnDepartment!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Department.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnDepartment!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion DepartmentFilterBuilder

// region DepartmentFields
class DepartmentFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField? _fHead_of_department;
  static TableField get head_of_department {
    return _fHead_of_department = _fHead_of_department ??
        SqlSyntax.setField(
            _fHead_of_department, 'head_of_department', DbType.text);
  }
}
// endregion DepartmentFields

//region DepartmentManager
class DepartmentManager extends SqfEntityProvider {
  DepartmentManager()
      : super(AttendanceDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'department';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion DepartmentManager
// region Staff_lesson_note
class Staff_lesson_note extends TableBase {
  Staff_lesson_note(
      {this.id,
      this.staffId,
      this.academic_year,
      this.term,
      this.week_1,
      this.week_2,
      this.week_3,
      this.week_4,
      this.week_5,
      this.week_6,
      this.week_7,
      this.week_8,
      this.week_9,
      this.week_10,
      this.week_11,
      this.week_12}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Staff_lesson_note.withFields(
      this.staffId,
      this.academic_year,
      this.term,
      this.week_1,
      this.week_2,
      this.week_3,
      this.week_4,
      this.week_5,
      this.week_6,
      this.week_7,
      this.week_8,
      this.week_9,
      this.week_10,
      this.week_11,
      this.week_12) {
    _setDefaultValues();
  }
  Staff_lesson_note.withId(
      this.id,
      this.staffId,
      this.academic_year,
      this.term,
      this.week_1,
      this.week_2,
      this.week_3,
      this.week_4,
      this.week_5,
      this.week_6,
      this.week_7,
      this.week_8,
      this.week_9,
      this.week_10,
      this.week_11,
      this.week_12) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Staff_lesson_note.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    staffId = int.tryParse(o['staffId'].toString());

    if (o['academic_year'] != null) {
      academic_year = o['academic_year'].toString();
    }
    if (o['term'] != null) {
      term = o['term'].toString();
    }
    if (o['week_1'] != null) {
      week_1 =
          o['week_1'].toString() == '1' || o['week_1'].toString() == 'true';
    }
    if (o['week_2'] != null) {
      week_2 =
          o['week_2'].toString() == '1' || o['week_2'].toString() == 'true';
    }
    if (o['week_3'] != null) {
      week_3 =
          o['week_3'].toString() == '1' || o['week_3'].toString() == 'true';
    }
    if (o['week_4'] != null) {
      week_4 =
          o['week_4'].toString() == '1' || o['week_4'].toString() == 'true';
    }
    if (o['week_5'] != null) {
      week_5 =
          o['week_5'].toString() == '1' || o['week_5'].toString() == 'true';
    }
    if (o['week_6'] != null) {
      week_6 =
          o['week_6'].toString() == '1' || o['week_6'].toString() == 'true';
    }
    if (o['week_7'] != null) {
      week_7 =
          o['week_7'].toString() == '1' || o['week_7'].toString() == 'true';
    }
    if (o['week_8'] != null) {
      week_8 =
          o['week_8'].toString() == '1' || o['week_8'].toString() == 'true';
    }
    if (o['week_9'] != null) {
      week_9 =
          o['week_9'].toString() == '1' || o['week_9'].toString() == 'true';
    }
    if (o['week_10'] != null) {
      week_10 =
          o['week_10'].toString() == '1' || o['week_10'].toString() == 'true';
    }
    if (o['week_11'] != null) {
      week_11 =
          o['week_11'].toString() == '1' || o['week_11'].toString() == 'true';
    }
    if (o['week_12'] != null) {
      week_12 =
          o['week_12'].toString() == '1' || o['week_12'].toString() == 'true';
    }

    // RELATIONSHIPS FromMAP
    plStaff = o['staff'] != null
        ? Staff.fromMap(o['staff'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Staff_lesson_note)
  int? id;
  int? staffId;
  String? academic_year;
  String? term;
  bool? week_1;
  bool? week_2;
  bool? week_3;
  bool? week_4;
  bool? week_5;
  bool? week_6;
  bool? week_7;
  bool? week_8;
  bool? week_9;
  bool? week_10;
  bool? week_11;
  bool? week_12;

  // end FIELDS (Staff_lesson_note)

// RELATIONSHIPS (Staff_lesson_note)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plStaff', 'plField2'..]) or so on..
  Staff? plStaff;

  /// get Staff By StaffId
  Future<Staff?> getStaff(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Staff()
        .getById(staffId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Staff_lesson_note)

  static const bool _softDeleteActivated = false;
  Staff_lesson_noteManager? __mnStaff_lesson_note;

  Staff_lesson_noteManager get _mnStaff_lesson_note {
    return __mnStaff_lesson_note =
        __mnStaff_lesson_note ?? Staff_lesson_noteManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (staffId != null) {
      map['staffId'] = forView
          ? plStaff == null
              ? staffId
              : plStaff!.first_name
          : staffId;
    } else if (staffId != null || !forView) {
      map['staffId'] = null;
    }
    if (academic_year != null || !forView) {
      map['academic_year'] = academic_year;
    }
    if (term != null || !forView) {
      map['term'] = term;
    }
    if (week_1 != null) {
      map['week_1'] = forQuery ? (week_1! ? 1 : 0) : week_1;
    } else if (week_1 != null || !forView) {
      map['week_1'] = null;
    }
    if (week_2 != null) {
      map['week_2'] = forQuery ? (week_2! ? 1 : 0) : week_2;
    } else if (week_2 != null || !forView) {
      map['week_2'] = null;
    }
    if (week_3 != null) {
      map['week_3'] = forQuery ? (week_3! ? 1 : 0) : week_3;
    } else if (week_3 != null || !forView) {
      map['week_3'] = null;
    }
    if (week_4 != null) {
      map['week_4'] = forQuery ? (week_4! ? 1 : 0) : week_4;
    } else if (week_4 != null || !forView) {
      map['week_4'] = null;
    }
    if (week_5 != null) {
      map['week_5'] = forQuery ? (week_5! ? 1 : 0) : week_5;
    } else if (week_5 != null || !forView) {
      map['week_5'] = null;
    }
    if (week_6 != null) {
      map['week_6'] = forQuery ? (week_6! ? 1 : 0) : week_6;
    } else if (week_6 != null || !forView) {
      map['week_6'] = null;
    }
    if (week_7 != null) {
      map['week_7'] = forQuery ? (week_7! ? 1 : 0) : week_7;
    } else if (week_7 != null || !forView) {
      map['week_7'] = null;
    }
    if (week_8 != null) {
      map['week_8'] = forQuery ? (week_8! ? 1 : 0) : week_8;
    } else if (week_8 != null || !forView) {
      map['week_8'] = null;
    }
    if (week_9 != null) {
      map['week_9'] = forQuery ? (week_9! ? 1 : 0) : week_9;
    } else if (week_9 != null || !forView) {
      map['week_9'] = null;
    }
    if (week_10 != null) {
      map['week_10'] = forQuery ? (week_10! ? 1 : 0) : week_10;
    } else if (week_10 != null || !forView) {
      map['week_10'] = null;
    }
    if (week_11 != null) {
      map['week_11'] = forQuery ? (week_11! ? 1 : 0) : week_11;
    } else if (week_11 != null || !forView) {
      map['week_11'] = null;
    }
    if (week_12 != null) {
      map['week_12'] = forQuery ? (week_12! ? 1 : 0) : week_12;
    } else if (week_12 != null || !forView) {
      map['week_12'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (staffId != null) {
      map['staffId'] = forView
          ? plStaff == null
              ? staffId
              : plStaff!.first_name
          : staffId;
    } else if (staffId != null || !forView) {
      map['staffId'] = null;
    }
    if (academic_year != null || !forView) {
      map['academic_year'] = academic_year;
    }
    if (term != null || !forView) {
      map['term'] = term;
    }
    if (week_1 != null) {
      map['week_1'] = forQuery ? (week_1! ? 1 : 0) : week_1;
    } else if (week_1 != null || !forView) {
      map['week_1'] = null;
    }
    if (week_2 != null) {
      map['week_2'] = forQuery ? (week_2! ? 1 : 0) : week_2;
    } else if (week_2 != null || !forView) {
      map['week_2'] = null;
    }
    if (week_3 != null) {
      map['week_3'] = forQuery ? (week_3! ? 1 : 0) : week_3;
    } else if (week_3 != null || !forView) {
      map['week_3'] = null;
    }
    if (week_4 != null) {
      map['week_4'] = forQuery ? (week_4! ? 1 : 0) : week_4;
    } else if (week_4 != null || !forView) {
      map['week_4'] = null;
    }
    if (week_5 != null) {
      map['week_5'] = forQuery ? (week_5! ? 1 : 0) : week_5;
    } else if (week_5 != null || !forView) {
      map['week_5'] = null;
    }
    if (week_6 != null) {
      map['week_6'] = forQuery ? (week_6! ? 1 : 0) : week_6;
    } else if (week_6 != null || !forView) {
      map['week_6'] = null;
    }
    if (week_7 != null) {
      map['week_7'] = forQuery ? (week_7! ? 1 : 0) : week_7;
    } else if (week_7 != null || !forView) {
      map['week_7'] = null;
    }
    if (week_8 != null) {
      map['week_8'] = forQuery ? (week_8! ? 1 : 0) : week_8;
    } else if (week_8 != null || !forView) {
      map['week_8'] = null;
    }
    if (week_9 != null) {
      map['week_9'] = forQuery ? (week_9! ? 1 : 0) : week_9;
    } else if (week_9 != null || !forView) {
      map['week_9'] = null;
    }
    if (week_10 != null) {
      map['week_10'] = forQuery ? (week_10! ? 1 : 0) : week_10;
    } else if (week_10 != null || !forView) {
      map['week_10'] = null;
    }
    if (week_11 != null) {
      map['week_11'] = forQuery ? (week_11! ? 1 : 0) : week_11;
    } else if (week_11 != null || !forView) {
      map['week_11'] = null;
    }
    if (week_12 != null) {
      map['week_12'] = forQuery ? (week_12! ? 1 : 0) : week_12;
    } else if (week_12 != null || !forView) {
      map['week_12'] = null;
    }

    return map;
  }

  /// This method returns Json String [Staff_lesson_note]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Staff_lesson_note]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      staffId,
      academic_year,
      term,
      week_1,
      week_2,
      week_3,
      week_4,
      week_5,
      week_6,
      week_7,
      week_8,
      week_9,
      week_10,
      week_11,
      week_12
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      staffId,
      academic_year,
      term,
      week_1,
      week_2,
      week_3,
      week_4,
      week_5,
      week_6,
      week_7,
      week_8,
      week_9,
      week_10,
      week_11,
      week_12
    ];
  }

  static Future<List<Staff_lesson_note>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Staff_lesson_note.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Staff_lesson_note>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Staff_lesson_note>[];
    try {
      objList = list
          .map((staff_lesson_note) => Staff_lesson_note.fromMap(
              staff_lesson_note as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Staff_lesson_note.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Staff_lesson_note>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Staff_lesson_note> objList = <Staff_lesson_note>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Staff_lesson_note.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plStaff'))) {
          obj.plStaff =
              obj.plStaff ?? await obj.getStaff(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Staff_lesson_note by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Staff_lesson_note] if exist, otherwise returns null
  Future<Staff_lesson_note?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Staff_lesson_note? obj;
    final data = await _mnStaff_lesson_note.getById([id]);
    if (data.length != 0) {
      obj = Staff_lesson_note.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plStaff'))) {
          obj.plStaff =
              obj.plStaff ?? await obj.getStaff(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Staff_lesson_note) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnStaff_lesson_note.insert(this, ignoreBatch);
    } else {
      await _mnStaff_lesson_note.update(this);
    }

    return id;
  }

  /// Saves the (Staff_lesson_note) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnStaff_lesson_note.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnStaff_lesson_note.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Staff_lesson_note. Returns a new Primary Key value of Staff_lesson_note

  /// <returns>Returns a new Primary Key value of Staff_lesson_note
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Staff_lesson_note> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Staff_lesson_note> staff_lesson_notes,
      {bool? exclusive,
      bool? noResult,
      bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await AttendanceDbModel().batchStart();
    for (final obj in staff_lesson_notes) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await AttendanceDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < staff_lesson_notes.length; i++) {
        if (staff_lesson_notes[i].id == null) {
          staff_lesson_notes[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnStaff_lesson_note.rawInsert(
          'INSERT OR REPLACE INTO staff_lesson_note (id, staffId, academic_year, term, week_1, week_2, week_3, week_4, week_5, week_6, week_7, week_8, week_9, week_10, week_11, week_12)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            staffId,
            academic_year,
            term,
            week_1,
            week_2,
            week_3,
            week_4,
            week_5,
            week_6,
            week_7,
            week_8,
            week_9,
            week_10,
            week_11,
            week_12
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Staff_lesson_note id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Staff_lesson_note id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'Staff_lesson_note Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Staff_lesson_note>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Staff_lesson_note> staff_lesson_notes,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnStaff_lesson_note.rawInsertAll(
        'INSERT OR REPLACE INTO staff_lesson_note (id, staffId, academic_year, term, week_1, week_2, week_3, week_4, week_5, week_6, week_7, week_8, week_9, week_10, week_11, week_12)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        staff_lesson_notes,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Staff_lesson_note

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Staff_lesson_note invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnStaff_lesson_note
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnStaff_lesson_note.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Staff_lesson_note] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  Staff_lesson_noteFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Staff_lesson_noteFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  Staff_lesson_noteFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Staff_lesson_noteFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    staffId = staffId ?? 0;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion staff_lesson_note

// region Staff_lesson_noteField
class Staff_lesson_noteField extends FilterBase {
  Staff_lesson_noteField(Staff_lesson_noteFilterBuilder staff_lesson_noteFB)
      : super(staff_lesson_noteFB);

  @override
  Staff_lesson_noteFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as Staff_lesson_noteFilterBuilder;
  }

  @override
  Staff_lesson_noteFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as Staff_lesson_noteFilterBuilder;
  }

  @override
  Staff_lesson_noteFilterBuilder isNull() {
    return super.isNull() as Staff_lesson_noteFilterBuilder;
  }

  @override
  Staff_lesson_noteFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as Staff_lesson_noteFilterBuilder;
  }

  @override
  Staff_lesson_noteFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as Staff_lesson_noteFilterBuilder;
  }

  @override
  Staff_lesson_noteFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as Staff_lesson_noteFilterBuilder;
  }

  @override
  Staff_lesson_noteFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as Staff_lesson_noteFilterBuilder;
  }

  @override
  Staff_lesson_noteFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as Staff_lesson_noteFilterBuilder;
  }

  @override
  Staff_lesson_noteFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as Staff_lesson_noteFilterBuilder;
  }

  @override
  Staff_lesson_noteFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as Staff_lesson_noteFilterBuilder;
  }

  @override
  Staff_lesson_noteFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as Staff_lesson_noteFilterBuilder;
  }

  @override
  Staff_lesson_noteFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as Staff_lesson_noteFilterBuilder;
  }

  @override
  Staff_lesson_noteField get not {
    return super.not as Staff_lesson_noteField;
  }
}
// endregion Staff_lesson_noteField

// region Staff_lesson_noteFilterBuilder
class Staff_lesson_noteFilterBuilder extends ConjunctionBase {
  Staff_lesson_noteFilterBuilder(Staff_lesson_note obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnStaff_lesson_note = obj._mnStaff_lesson_note;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  Staff_lesson_noteManager? _mnStaff_lesson_note;

  /// put the sql keyword 'AND'
  @override
  Staff_lesson_noteFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  Staff_lesson_noteFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  Staff_lesson_noteFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  Staff_lesson_noteFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  Staff_lesson_noteFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  Staff_lesson_noteFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  Staff_lesson_noteFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Staff_lesson_noteFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Staff_lesson_noteFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Staff_lesson_noteFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Staff_lesson_noteFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  Staff_lesson_noteField _setField(
      Staff_lesson_noteField? field, String colName, DbType dbtype) {
    return Staff_lesson_noteField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  Staff_lesson_noteField? _id;
  Staff_lesson_noteField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  Staff_lesson_noteField? _staffId;
  Staff_lesson_noteField get staffId {
    return _staffId = _setField(_staffId, 'staffId', DbType.integer);
  }

  Staff_lesson_noteField? _academic_year;
  Staff_lesson_noteField get academic_year {
    return _academic_year =
        _setField(_academic_year, 'academic_year', DbType.text);
  }

  Staff_lesson_noteField? _term;
  Staff_lesson_noteField get term {
    return _term = _setField(_term, 'term', DbType.text);
  }

  Staff_lesson_noteField? _week_1;
  Staff_lesson_noteField get week_1 {
    return _week_1 = _setField(_week_1, 'week_1', DbType.bool);
  }

  Staff_lesson_noteField? _week_2;
  Staff_lesson_noteField get week_2 {
    return _week_2 = _setField(_week_2, 'week_2', DbType.bool);
  }

  Staff_lesson_noteField? _week_3;
  Staff_lesson_noteField get week_3 {
    return _week_3 = _setField(_week_3, 'week_3', DbType.bool);
  }

  Staff_lesson_noteField? _week_4;
  Staff_lesson_noteField get week_4 {
    return _week_4 = _setField(_week_4, 'week_4', DbType.bool);
  }

  Staff_lesson_noteField? _week_5;
  Staff_lesson_noteField get week_5 {
    return _week_5 = _setField(_week_5, 'week_5', DbType.bool);
  }

  Staff_lesson_noteField? _week_6;
  Staff_lesson_noteField get week_6 {
    return _week_6 = _setField(_week_6, 'week_6', DbType.bool);
  }

  Staff_lesson_noteField? _week_7;
  Staff_lesson_noteField get week_7 {
    return _week_7 = _setField(_week_7, 'week_7', DbType.bool);
  }

  Staff_lesson_noteField? _week_8;
  Staff_lesson_noteField get week_8 {
    return _week_8 = _setField(_week_8, 'week_8', DbType.bool);
  }

  Staff_lesson_noteField? _week_9;
  Staff_lesson_noteField get week_9 {
    return _week_9 = _setField(_week_9, 'week_9', DbType.bool);
  }

  Staff_lesson_noteField? _week_10;
  Staff_lesson_noteField get week_10 {
    return _week_10 = _setField(_week_10, 'week_10', DbType.bool);
  }

  Staff_lesson_noteField? _week_11;
  Staff_lesson_noteField get week_11 {
    return _week_11 = _setField(_week_11, 'week_11', DbType.bool);
  }

  Staff_lesson_noteField? _week_12;
  Staff_lesson_noteField get week_12 {
    return _week_12 = _setField(_week_12, 'week_12', DbType.bool);
  }

  /// Deletes List<Staff_lesson_note> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnStaff_lesson_note!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnStaff_lesson_note!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from staff_lesson_note ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnStaff_lesson_note!.updateBatch(qparams, values);
  }

  /// This method always returns [Staff_lesson_note] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Staff_lesson_note?
  @override
  Future<Staff_lesson_note?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnStaff_lesson_note!.toList(qparams);
    final data = await objFuture;
    Staff_lesson_note? obj;
    if (data.isNotEmpty) {
      obj = Staff_lesson_note.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plStaff'))) {
          obj.plStaff =
              obj.plStaff ?? await obj.getStaff(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Staff_lesson_note]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Staff_lesson_note?
  @override
  Future<Staff_lesson_note> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Staff_lesson_note();
  }

  /// This method returns int. [Staff_lesson_note]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? staff_lesson_noteCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final staff_lesson_notesFuture =
        await _mnStaff_lesson_note!.toList(qparams);
    final int count = staff_lesson_notesFuture[0]['CNT'] as int;
    if (staff_lesson_noteCount != null) {
      staff_lesson_noteCount(count);
    }
    return count;
  }

  /// This method returns List<Staff_lesson_note> [Staff_lesson_note]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Staff_lesson_note>
  @override
  Future<List<Staff_lesson_note>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Staff_lesson_note> staff_lesson_notesData =
        await Staff_lesson_note.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return staff_lesson_notesData;
  }

  /// This method returns Json String [Staff_lesson_note]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Staff_lesson_note]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Staff_lesson_note]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnStaff_lesson_note!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Staff_lesson_note]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM staff_lesson_note WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnStaff_lesson_note!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Staff_lesson_note]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnStaff_lesson_note!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Staff_lesson_note.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnStaff_lesson_note!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Staff_lesson_noteFilterBuilder

// region Staff_lesson_noteFields
class Staff_lesson_noteFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fStaffId;
  static TableField get staffId {
    return _fStaffId =
        _fStaffId ?? SqlSyntax.setField(_fStaffId, 'staffId', DbType.integer);
  }

  static TableField? _fAcademic_year;
  static TableField get academic_year {
    return _fAcademic_year = _fAcademic_year ??
        SqlSyntax.setField(_fAcademic_year, 'academic_year', DbType.text);
  }

  static TableField? _fTerm;
  static TableField get term {
    return _fTerm = _fTerm ?? SqlSyntax.setField(_fTerm, 'term', DbType.text);
  }

  static TableField? _fWeek_1;
  static TableField get week_1 {
    return _fWeek_1 =
        _fWeek_1 ?? SqlSyntax.setField(_fWeek_1, 'week_1', DbType.bool);
  }

  static TableField? _fWeek_2;
  static TableField get week_2 {
    return _fWeek_2 =
        _fWeek_2 ?? SqlSyntax.setField(_fWeek_2, 'week_2', DbType.bool);
  }

  static TableField? _fWeek_3;
  static TableField get week_3 {
    return _fWeek_3 =
        _fWeek_3 ?? SqlSyntax.setField(_fWeek_3, 'week_3', DbType.bool);
  }

  static TableField? _fWeek_4;
  static TableField get week_4 {
    return _fWeek_4 =
        _fWeek_4 ?? SqlSyntax.setField(_fWeek_4, 'week_4', DbType.bool);
  }

  static TableField? _fWeek_5;
  static TableField get week_5 {
    return _fWeek_5 =
        _fWeek_5 ?? SqlSyntax.setField(_fWeek_5, 'week_5', DbType.bool);
  }

  static TableField? _fWeek_6;
  static TableField get week_6 {
    return _fWeek_6 =
        _fWeek_6 ?? SqlSyntax.setField(_fWeek_6, 'week_6', DbType.bool);
  }

  static TableField? _fWeek_7;
  static TableField get week_7 {
    return _fWeek_7 =
        _fWeek_7 ?? SqlSyntax.setField(_fWeek_7, 'week_7', DbType.bool);
  }

  static TableField? _fWeek_8;
  static TableField get week_8 {
    return _fWeek_8 =
        _fWeek_8 ?? SqlSyntax.setField(_fWeek_8, 'week_8', DbType.bool);
  }

  static TableField? _fWeek_9;
  static TableField get week_9 {
    return _fWeek_9 =
        _fWeek_9 ?? SqlSyntax.setField(_fWeek_9, 'week_9', DbType.bool);
  }

  static TableField? _fWeek_10;
  static TableField get week_10 {
    return _fWeek_10 =
        _fWeek_10 ?? SqlSyntax.setField(_fWeek_10, 'week_10', DbType.bool);
  }

  static TableField? _fWeek_11;
  static TableField get week_11 {
    return _fWeek_11 =
        _fWeek_11 ?? SqlSyntax.setField(_fWeek_11, 'week_11', DbType.bool);
  }

  static TableField? _fWeek_12;
  static TableField get week_12 {
    return _fWeek_12 =
        _fWeek_12 ?? SqlSyntax.setField(_fWeek_12, 'week_12', DbType.bool);
  }
}
// endregion Staff_lesson_noteFields

//region Staff_lesson_noteManager
class Staff_lesson_noteManager extends SqfEntityProvider {
  Staff_lesson_noteManager()
      : super(AttendanceDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'staff_lesson_note';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion Staff_lesson_noteManager
// region Plc
class Plc extends TableBase {
  Plc(
      {this.id,
      this.staffId,
      this.academic_year,
      this.term,
      this.week_1,
      this.week_2,
      this.week_3,
      this.week_4,
      this.week_5,
      this.week_6,
      this.week_7,
      this.week_8,
      this.week_9,
      this.week_10,
      this.week_11,
      this.week_12}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Plc.withFields(
      this.staffId,
      this.academic_year,
      this.term,
      this.week_1,
      this.week_2,
      this.week_3,
      this.week_4,
      this.week_5,
      this.week_6,
      this.week_7,
      this.week_8,
      this.week_9,
      this.week_10,
      this.week_11,
      this.week_12) {
    _setDefaultValues();
  }
  Plc.withId(
      this.id,
      this.staffId,
      this.academic_year,
      this.term,
      this.week_1,
      this.week_2,
      this.week_3,
      this.week_4,
      this.week_5,
      this.week_6,
      this.week_7,
      this.week_8,
      this.week_9,
      this.week_10,
      this.week_11,
      this.week_12) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Plc.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    staffId = int.tryParse(o['staffId'].toString());

    if (o['academic_year'] != null) {
      academic_year = o['academic_year'].toString();
    }
    if (o['term'] != null) {
      term = o['term'].toString();
    }
    if (o['week_1'] != null) {
      week_1 =
          o['week_1'].toString() == '1' || o['week_1'].toString() == 'true';
    }
    if (o['week_2'] != null) {
      week_2 =
          o['week_2'].toString() == '1' || o['week_2'].toString() == 'true';
    }
    if (o['week_3'] != null) {
      week_3 =
          o['week_3'].toString() == '1' || o['week_3'].toString() == 'true';
    }
    if (o['week_4'] != null) {
      week_4 =
          o['week_4'].toString() == '1' || o['week_4'].toString() == 'true';
    }
    if (o['week_5'] != null) {
      week_5 =
          o['week_5'].toString() == '1' || o['week_5'].toString() == 'true';
    }
    if (o['week_6'] != null) {
      week_6 =
          o['week_6'].toString() == '1' || o['week_6'].toString() == 'true';
    }
    if (o['week_7'] != null) {
      week_7 =
          o['week_7'].toString() == '1' || o['week_7'].toString() == 'true';
    }
    if (o['week_8'] != null) {
      week_8 =
          o['week_8'].toString() == '1' || o['week_8'].toString() == 'true';
    }
    if (o['week_9'] != null) {
      week_9 =
          o['week_9'].toString() == '1' || o['week_9'].toString() == 'true';
    }
    if (o['week_10'] != null) {
      week_10 =
          o['week_10'].toString() == '1' || o['week_10'].toString() == 'true';
    }
    if (o['week_11'] != null) {
      week_11 =
          o['week_11'].toString() == '1' || o['week_11'].toString() == 'true';
    }
    if (o['week_12'] != null) {
      week_12 =
          o['week_12'].toString() == '1' || o['week_12'].toString() == 'true';
    }

    // RELATIONSHIPS FromMAP
    plStaff = o['staff'] != null
        ? Staff.fromMap(o['staff'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Plc)
  int? id;
  int? staffId;
  String? academic_year;
  String? term;
  bool? week_1;
  bool? week_2;
  bool? week_3;
  bool? week_4;
  bool? week_5;
  bool? week_6;
  bool? week_7;
  bool? week_8;
  bool? week_9;
  bool? week_10;
  bool? week_11;
  bool? week_12;

  // end FIELDS (Plc)

// RELATIONSHIPS (Plc)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plStaff', 'plField2'..]) or so on..
  Staff? plStaff;

  /// get Staff By StaffId
  Future<Staff?> getStaff(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Staff()
        .getById(staffId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Plc)

  static const bool _softDeleteActivated = false;
  PlcManager? __mnPlc;

  PlcManager get _mnPlc {
    return __mnPlc = __mnPlc ?? PlcManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (staffId != null) {
      map['staffId'] = forView
          ? plStaff == null
              ? staffId
              : plStaff!.first_name
          : staffId;
    } else if (staffId != null || !forView) {
      map['staffId'] = null;
    }
    if (academic_year != null || !forView) {
      map['academic_year'] = academic_year;
    }
    if (term != null || !forView) {
      map['term'] = term;
    }
    if (week_1 != null) {
      map['week_1'] = forQuery ? (week_1! ? 1 : 0) : week_1;
    } else if (week_1 != null || !forView) {
      map['week_1'] = null;
    }
    if (week_2 != null) {
      map['week_2'] = forQuery ? (week_2! ? 1 : 0) : week_2;
    } else if (week_2 != null || !forView) {
      map['week_2'] = null;
    }
    if (week_3 != null) {
      map['week_3'] = forQuery ? (week_3! ? 1 : 0) : week_3;
    } else if (week_3 != null || !forView) {
      map['week_3'] = null;
    }
    if (week_4 != null) {
      map['week_4'] = forQuery ? (week_4! ? 1 : 0) : week_4;
    } else if (week_4 != null || !forView) {
      map['week_4'] = null;
    }
    if (week_5 != null) {
      map['week_5'] = forQuery ? (week_5! ? 1 : 0) : week_5;
    } else if (week_5 != null || !forView) {
      map['week_5'] = null;
    }
    if (week_6 != null) {
      map['week_6'] = forQuery ? (week_6! ? 1 : 0) : week_6;
    } else if (week_6 != null || !forView) {
      map['week_6'] = null;
    }
    if (week_7 != null) {
      map['week_7'] = forQuery ? (week_7! ? 1 : 0) : week_7;
    } else if (week_7 != null || !forView) {
      map['week_7'] = null;
    }
    if (week_8 != null) {
      map['week_8'] = forQuery ? (week_8! ? 1 : 0) : week_8;
    } else if (week_8 != null || !forView) {
      map['week_8'] = null;
    }
    if (week_9 != null) {
      map['week_9'] = forQuery ? (week_9! ? 1 : 0) : week_9;
    } else if (week_9 != null || !forView) {
      map['week_9'] = null;
    }
    if (week_10 != null) {
      map['week_10'] = forQuery ? (week_10! ? 1 : 0) : week_10;
    } else if (week_10 != null || !forView) {
      map['week_10'] = null;
    }
    if (week_11 != null) {
      map['week_11'] = forQuery ? (week_11! ? 1 : 0) : week_11;
    } else if (week_11 != null || !forView) {
      map['week_11'] = null;
    }
    if (week_12 != null) {
      map['week_12'] = forQuery ? (week_12! ? 1 : 0) : week_12;
    } else if (week_12 != null || !forView) {
      map['week_12'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (staffId != null) {
      map['staffId'] = forView
          ? plStaff == null
              ? staffId
              : plStaff!.first_name
          : staffId;
    } else if (staffId != null || !forView) {
      map['staffId'] = null;
    }
    if (academic_year != null || !forView) {
      map['academic_year'] = academic_year;
    }
    if (term != null || !forView) {
      map['term'] = term;
    }
    if (week_1 != null) {
      map['week_1'] = forQuery ? (week_1! ? 1 : 0) : week_1;
    } else if (week_1 != null || !forView) {
      map['week_1'] = null;
    }
    if (week_2 != null) {
      map['week_2'] = forQuery ? (week_2! ? 1 : 0) : week_2;
    } else if (week_2 != null || !forView) {
      map['week_2'] = null;
    }
    if (week_3 != null) {
      map['week_3'] = forQuery ? (week_3! ? 1 : 0) : week_3;
    } else if (week_3 != null || !forView) {
      map['week_3'] = null;
    }
    if (week_4 != null) {
      map['week_4'] = forQuery ? (week_4! ? 1 : 0) : week_4;
    } else if (week_4 != null || !forView) {
      map['week_4'] = null;
    }
    if (week_5 != null) {
      map['week_5'] = forQuery ? (week_5! ? 1 : 0) : week_5;
    } else if (week_5 != null || !forView) {
      map['week_5'] = null;
    }
    if (week_6 != null) {
      map['week_6'] = forQuery ? (week_6! ? 1 : 0) : week_6;
    } else if (week_6 != null || !forView) {
      map['week_6'] = null;
    }
    if (week_7 != null) {
      map['week_7'] = forQuery ? (week_7! ? 1 : 0) : week_7;
    } else if (week_7 != null || !forView) {
      map['week_7'] = null;
    }
    if (week_8 != null) {
      map['week_8'] = forQuery ? (week_8! ? 1 : 0) : week_8;
    } else if (week_8 != null || !forView) {
      map['week_8'] = null;
    }
    if (week_9 != null) {
      map['week_9'] = forQuery ? (week_9! ? 1 : 0) : week_9;
    } else if (week_9 != null || !forView) {
      map['week_9'] = null;
    }
    if (week_10 != null) {
      map['week_10'] = forQuery ? (week_10! ? 1 : 0) : week_10;
    } else if (week_10 != null || !forView) {
      map['week_10'] = null;
    }
    if (week_11 != null) {
      map['week_11'] = forQuery ? (week_11! ? 1 : 0) : week_11;
    } else if (week_11 != null || !forView) {
      map['week_11'] = null;
    }
    if (week_12 != null) {
      map['week_12'] = forQuery ? (week_12! ? 1 : 0) : week_12;
    } else if (week_12 != null || !forView) {
      map['week_12'] = null;
    }

    return map;
  }

  /// This method returns Json String [Plc]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Plc]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      staffId,
      academic_year,
      term,
      week_1,
      week_2,
      week_3,
      week_4,
      week_5,
      week_6,
      week_7,
      week_8,
      week_9,
      week_10,
      week_11,
      week_12
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      staffId,
      academic_year,
      term,
      week_1,
      week_2,
      week_3,
      week_4,
      week_5,
      week_6,
      week_7,
      week_8,
      week_9,
      week_10,
      week_11,
      week_12
    ];
  }

  static Future<List<Plc>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Plc.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Plc>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Plc>[];
    try {
      objList =
          list.map((plc) => Plc.fromMap(plc as Map<String, dynamic>)).toList();
    } catch (e) {
      debugPrint('SQFENTITY ERROR Plc.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Plc>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Plc> objList = <Plc>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Plc.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plStaff'))) {
          obj.plStaff =
              obj.plStaff ?? await obj.getStaff(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Plc by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Plc] if exist, otherwise returns null
  Future<Plc?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Plc? obj;
    final data = await _mnPlc.getById([id]);
    if (data.length != 0) {
      obj = Plc.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plStaff'))) {
          obj.plStaff =
              obj.plStaff ?? await obj.getStaff(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Plc) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnPlc.insert(this, ignoreBatch);
    } else {
      await _mnPlc.update(this);
    }

    return id;
  }

  /// Saves the (Plc) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnPlc.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnPlc.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Plc. Returns a new Primary Key value of Plc

  /// <returns>Returns a new Primary Key value of Plc
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Plc> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Plc> plcs,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await AttendanceDbModel().batchStart();
    for (final obj in plcs) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await AttendanceDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < plcs.length; i++) {
        if (plcs[i].id == null) {
          plcs[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnPlc.rawInsert(
          'INSERT OR REPLACE INTO plc (id, staffId, academic_year, term, week_1, week_2, week_3, week_4, week_5, week_6, week_7, week_8, week_9, week_10, week_11, week_12)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            staffId,
            academic_year,
            term,
            week_1,
            week_2,
            week_3,
            week_4,
            week_5,
            week_6,
            week_7,
            week_8,
            week_9,
            week_10,
            week_11,
            week_12
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Plc id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Plc id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Plc Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Plc>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Plc> plcs,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnPlc.rawInsertAll(
        'INSERT OR REPLACE INTO plc (id, staffId, academic_year, term, week_1, week_2, week_3, week_4, week_5, week_6, week_7, week_8, week_9, week_10, week_11, week_12)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        plcs,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Plc

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Plc invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnPlc
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnPlc.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Plc] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  PlcFilterBuilder select({List<String>? columnsToSelect, bool? getIsDeleted}) {
    return PlcFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  PlcFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return PlcFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    staffId = staffId ?? 0;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion plc

// region PlcField
class PlcField extends FilterBase {
  PlcField(PlcFilterBuilder plcFB) : super(plcFB);

  @override
  PlcFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as PlcFilterBuilder;
  }

  @override
  PlcFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as PlcFilterBuilder;
  }

  @override
  PlcFilterBuilder isNull() {
    return super.isNull() as PlcFilterBuilder;
  }

  @override
  PlcFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as PlcFilterBuilder;
  }

  @override
  PlcFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as PlcFilterBuilder;
  }

  @override
  PlcFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as PlcFilterBuilder;
  }

  @override
  PlcFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as PlcFilterBuilder;
  }

  @override
  PlcFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as PlcFilterBuilder;
  }

  @override
  PlcFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as PlcFilterBuilder;
  }

  @override
  PlcFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as PlcFilterBuilder;
  }

  @override
  PlcFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as PlcFilterBuilder;
  }

  @override
  PlcFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as PlcFilterBuilder;
  }

  @override
  PlcField get not {
    return super.not as PlcField;
  }
}
// endregion PlcField

// region PlcFilterBuilder
class PlcFilterBuilder extends ConjunctionBase {
  PlcFilterBuilder(Plc obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnPlc = obj._mnPlc;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  PlcManager? _mnPlc;

  /// put the sql keyword 'AND'
  @override
  PlcFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  PlcFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  PlcFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  PlcFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  PlcFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  PlcFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  PlcFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  PlcFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  PlcFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  PlcFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  PlcFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  PlcField _setField(PlcField? field, String colName, DbType dbtype) {
    return PlcField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  PlcField? _id;
  PlcField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  PlcField? _staffId;
  PlcField get staffId {
    return _staffId = _setField(_staffId, 'staffId', DbType.integer);
  }

  PlcField? _academic_year;
  PlcField get academic_year {
    return _academic_year =
        _setField(_academic_year, 'academic_year', DbType.text);
  }

  PlcField? _term;
  PlcField get term {
    return _term = _setField(_term, 'term', DbType.text);
  }

  PlcField? _week_1;
  PlcField get week_1 {
    return _week_1 = _setField(_week_1, 'week_1', DbType.bool);
  }

  PlcField? _week_2;
  PlcField get week_2 {
    return _week_2 = _setField(_week_2, 'week_2', DbType.bool);
  }

  PlcField? _week_3;
  PlcField get week_3 {
    return _week_3 = _setField(_week_3, 'week_3', DbType.bool);
  }

  PlcField? _week_4;
  PlcField get week_4 {
    return _week_4 = _setField(_week_4, 'week_4', DbType.bool);
  }

  PlcField? _week_5;
  PlcField get week_5 {
    return _week_5 = _setField(_week_5, 'week_5', DbType.bool);
  }

  PlcField? _week_6;
  PlcField get week_6 {
    return _week_6 = _setField(_week_6, 'week_6', DbType.bool);
  }

  PlcField? _week_7;
  PlcField get week_7 {
    return _week_7 = _setField(_week_7, 'week_7', DbType.bool);
  }

  PlcField? _week_8;
  PlcField get week_8 {
    return _week_8 = _setField(_week_8, 'week_8', DbType.bool);
  }

  PlcField? _week_9;
  PlcField get week_9 {
    return _week_9 = _setField(_week_9, 'week_9', DbType.bool);
  }

  PlcField? _week_10;
  PlcField get week_10 {
    return _week_10 = _setField(_week_10, 'week_10', DbType.bool);
  }

  PlcField? _week_11;
  PlcField get week_11 {
    return _week_11 = _setField(_week_11, 'week_11', DbType.bool);
  }

  PlcField? _week_12;
  PlcField get week_12 {
    return _week_12 = _setField(_week_12, 'week_12', DbType.bool);
  }

  /// Deletes List<Plc> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnPlc!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnPlc!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from plc ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnPlc!.updateBatch(qparams, values);
  }

  /// This method always returns [Plc] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Plc?
  @override
  Future<Plc?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnPlc!.toList(qparams);
    final data = await objFuture;
    Plc? obj;
    if (data.isNotEmpty) {
      obj = Plc.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plStaff'))) {
          obj.plStaff =
              obj.plStaff ?? await obj.getStaff(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Plc]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Plc?
  @override
  Future<Plc> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Plc();
  }

  /// This method returns int. [Plc]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? plcCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final plcsFuture = await _mnPlc!.toList(qparams);
    final int count = plcsFuture[0]['CNT'] as int;
    if (plcCount != null) {
      plcCount(count);
    }
    return count;
  }

  /// This method returns List<Plc> [Plc]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Plc>
  @override
  Future<List<Plc>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Plc> plcsData = await Plc.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return plcsData;
  }

  /// This method returns Json String [Plc]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Plc]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Plc]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnPlc!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Plc]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM plc WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnPlc!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Plc]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnPlc!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Plc.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnPlc!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion PlcFilterBuilder

// region PlcFields
class PlcFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fStaffId;
  static TableField get staffId {
    return _fStaffId =
        _fStaffId ?? SqlSyntax.setField(_fStaffId, 'staffId', DbType.integer);
  }

  static TableField? _fAcademic_year;
  static TableField get academic_year {
    return _fAcademic_year = _fAcademic_year ??
        SqlSyntax.setField(_fAcademic_year, 'academic_year', DbType.text);
  }

  static TableField? _fTerm;
  static TableField get term {
    return _fTerm = _fTerm ?? SqlSyntax.setField(_fTerm, 'term', DbType.text);
  }

  static TableField? _fWeek_1;
  static TableField get week_1 {
    return _fWeek_1 =
        _fWeek_1 ?? SqlSyntax.setField(_fWeek_1, 'week_1', DbType.bool);
  }

  static TableField? _fWeek_2;
  static TableField get week_2 {
    return _fWeek_2 =
        _fWeek_2 ?? SqlSyntax.setField(_fWeek_2, 'week_2', DbType.bool);
  }

  static TableField? _fWeek_3;
  static TableField get week_3 {
    return _fWeek_3 =
        _fWeek_3 ?? SqlSyntax.setField(_fWeek_3, 'week_3', DbType.bool);
  }

  static TableField? _fWeek_4;
  static TableField get week_4 {
    return _fWeek_4 =
        _fWeek_4 ?? SqlSyntax.setField(_fWeek_4, 'week_4', DbType.bool);
  }

  static TableField? _fWeek_5;
  static TableField get week_5 {
    return _fWeek_5 =
        _fWeek_5 ?? SqlSyntax.setField(_fWeek_5, 'week_5', DbType.bool);
  }

  static TableField? _fWeek_6;
  static TableField get week_6 {
    return _fWeek_6 =
        _fWeek_6 ?? SqlSyntax.setField(_fWeek_6, 'week_6', DbType.bool);
  }

  static TableField? _fWeek_7;
  static TableField get week_7 {
    return _fWeek_7 =
        _fWeek_7 ?? SqlSyntax.setField(_fWeek_7, 'week_7', DbType.bool);
  }

  static TableField? _fWeek_8;
  static TableField get week_8 {
    return _fWeek_8 =
        _fWeek_8 ?? SqlSyntax.setField(_fWeek_8, 'week_8', DbType.bool);
  }

  static TableField? _fWeek_9;
  static TableField get week_9 {
    return _fWeek_9 =
        _fWeek_9 ?? SqlSyntax.setField(_fWeek_9, 'week_9', DbType.bool);
  }

  static TableField? _fWeek_10;
  static TableField get week_10 {
    return _fWeek_10 =
        _fWeek_10 ?? SqlSyntax.setField(_fWeek_10, 'week_10', DbType.bool);
  }

  static TableField? _fWeek_11;
  static TableField get week_11 {
    return _fWeek_11 =
        _fWeek_11 ?? SqlSyntax.setField(_fWeek_11, 'week_11', DbType.bool);
  }

  static TableField? _fWeek_12;
  static TableField get week_12 {
    return _fWeek_12 =
        _fWeek_12 ?? SqlSyntax.setField(_fWeek_12, 'week_12', DbType.bool);
  }
}
// endregion PlcFields

//region PlcManager
class PlcManager extends SqfEntityProvider {
  PlcManager()
      : super(AttendanceDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'plc';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion PlcManager
// region User
class User extends TableBase {
  User({this.id, this.staffId, this.username, this.password}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  User.withFields(this.staffId, this.username, this.password) {
    _setDefaultValues();
  }
  User.withId(this.id, this.staffId, this.username, this.password) {
    _setDefaultValues();
  }
  // fromMap v2.0
  User.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    staffId = int.tryParse(o['staffId'].toString());

    if (o['username'] != null) {
      username = o['username'].toString();
    }
    if (o['password'] != null) {
      password = o['password'].toString();
    }

    // RELATIONSHIPS FromMAP
    plStaff = o['staff'] != null
        ? Staff.fromMap(o['staff'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (User)
  int? id;
  int? staffId;
  String? username;
  String? password;

  // end FIELDS (User)

// RELATIONSHIPS (User)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plStaff', 'plField2'..]) or so on..
  Staff? plStaff;

  /// get Staff By StaffId
  Future<Staff?> getStaff(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Staff()
        .getById(staffId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (User)

  static const bool _softDeleteActivated = false;
  UserManager? __mnUser;

  UserManager get _mnUser {
    return __mnUser = __mnUser ?? UserManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (staffId != null) {
      map['staffId'] = forView
          ? plStaff == null
              ? staffId
              : plStaff!.first_name
          : staffId;
    } else if (staffId != null || !forView) {
      map['staffId'] = null;
    }
    if (username != null || !forView) {
      map['username'] = username;
    }
    if (password != null || !forView) {
      map['password'] = password;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (staffId != null) {
      map['staffId'] = forView
          ? plStaff == null
              ? staffId
              : plStaff!.first_name
          : staffId;
    } else if (staffId != null || !forView) {
      map['staffId'] = null;
    }
    if (username != null || !forView) {
      map['username'] = username;
    }
    if (password != null || !forView) {
      map['password'] = password;
    }

    return map;
  }

  /// This method returns Json String [User]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [User]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [staffId, username, password];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, staffId, username, password];
  }

  static Future<List<User>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR User.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<User>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <User>[];
    try {
      objList = list
          .map((user) => User.fromMap(user as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR User.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<User>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<User> objList = <User>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = User.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plStaff'))) {
          obj.plStaff =
              obj.plStaff ?? await obj.getStaff(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns User by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [User] if exist, otherwise returns null
  Future<User?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    User? obj;
    final data = await _mnUser.getById([id]);
    if (data.length != 0) {
      obj = User.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plStaff'))) {
          obj.plStaff =
              obj.plStaff ?? await obj.getStaff(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (User) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnUser.insert(this, ignoreBatch);
    } else {
      await _mnUser.update(this);
    }

    return id;
  }

  /// Saves the (User) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnUser.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnUser.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs User. Returns a new Primary Key value of User

  /// <returns>Returns a new Primary Key value of User
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<User> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<User> users,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await AttendanceDbModel().batchStart();
    for (final obj in users) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await AttendanceDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < users.length; i++) {
        if (users[i].id == null) {
          users[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnUser.rawInsert(
          'INSERT OR REPLACE INTO user (id, staffId, username, password)  VALUES (?,?,?,?)',
          [id, staffId, username, password],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'User id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'User id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'User Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<User>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<User> users,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnUser.rawInsertAll(
        'INSERT OR REPLACE INTO user (id, staffId, username, password)  VALUES (?,?,?,?)',
        users,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes User

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete User invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnUser
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnUser.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [User] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  UserFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UserFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  UserFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UserFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    staffId = staffId ?? 0;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion user

// region UserField
class UserField extends FilterBase {
  UserField(UserFilterBuilder userFB) : super(userFB);

  @override
  UserFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder isNull() {
    return super.isNull() as UserFilterBuilder;
  }

  @override
  UserFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as UserFilterBuilder;
  }

  @override
  UserField get not {
    return super.not as UserField;
  }
}
// endregion UserField

// region UserFilterBuilder
class UserFilterBuilder extends ConjunctionBase {
  UserFilterBuilder(User obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnUser = obj._mnUser;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  UserManager? _mnUser;

  /// put the sql keyword 'AND'
  @override
  UserFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  UserFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  UserFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  UserFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  UserFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  UserFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  UserFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  UserFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  UserFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  UserFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  UserFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  UserField _setField(UserField? field, String colName, DbType dbtype) {
    return UserField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  UserField? _id;
  UserField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  UserField? _staffId;
  UserField get staffId {
    return _staffId = _setField(_staffId, 'staffId', DbType.integer);
  }

  UserField? _username;
  UserField get username {
    return _username = _setField(_username, 'username', DbType.text);
  }

  UserField? _password;
  UserField get password {
    return _password = _setField(_password, 'password', DbType.text);
  }

  /// Deletes List<User> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnUser!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnUser!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from user ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnUser!.updateBatch(qparams, values);
  }

  /// This method always returns [User] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> User?
  @override
  Future<User?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnUser!.toList(qparams);
    final data = await objFuture;
    User? obj;
    if (data.isNotEmpty) {
      obj = User.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plStaff'))) {
          obj.plStaff =
              obj.plStaff ?? await obj.getStaff(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [User]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> User?
  @override
  Future<User> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        User();
  }

  /// This method returns int. [User]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? userCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final usersFuture = await _mnUser!.toList(qparams);
    final int count = usersFuture[0]['CNT'] as int;
    if (userCount != null) {
      userCount(count);
    }
    return count;
  }

  /// This method returns List<User> [User]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<User>
  @override
  Future<List<User>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<User> usersData = await User.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return usersData;
  }

  /// This method returns Json String [User]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [User]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [User]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnUser!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [User]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM user WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnUser!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [User]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnUser!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await User.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnUser!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion UserFilterBuilder

// region UserFields
class UserFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fStaffId;
  static TableField get staffId {
    return _fStaffId =
        _fStaffId ?? SqlSyntax.setField(_fStaffId, 'staffId', DbType.integer);
  }

  static TableField? _fUsername;
  static TableField get username {
    return _fUsername =
        _fUsername ?? SqlSyntax.setField(_fUsername, 'username', DbType.text);
  }

  static TableField? _fPassword;
  static TableField get password {
    return _fPassword =
        _fPassword ?? SqlSyntax.setField(_fPassword, 'password', DbType.text);
  }
}
// endregion UserFields

//region UserManager
class UserManager extends SqfEntityProvider {
  UserManager()
      : super(AttendanceDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'user';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion UserManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await AttendanceDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await AttendanceDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await AttendanceDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class AttendanceDbModelSequenceManager extends SqfEntityProvider {
  AttendanceDbModelSequenceManager() : super(AttendanceDbModel());
}
// END OF ENTITIES
